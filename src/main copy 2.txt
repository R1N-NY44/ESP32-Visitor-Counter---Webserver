#include <Arduino.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <WebServer.h>
#include <DNSServer.h>
#include <Preferences.h>  // Untuk persistent storage

// Konfigurasi Access Point
const char* ssid = "VisitorCounter";
const char* password = "12345678";  // Minimal 8 karakter untuk WPA2

// DNS Server untuk captive portal
const byte DNS_PORT = 53;
IPAddress apIP(192, 168, 4, 1);
DNSServer dnsServer;
WebServer server(80);
Preferences preferences;  // Object untuk persistent storage

// Konfigurasi LCD dan sensor
LiquidCrystal_I2C lcd(0x27,20,4);
const int trigPinA = 14;
const int echoPinA = 27;
const int trigPinB = 26;
const int echoPinB = 25;

// Variabel counting
int countIn = 0;
int countOut = 0;
int currentVisitor = 0;

// Konstanta untuk sistem deteksi
const int detectionThreshold = 10;     // Jarak deteksi dalam cm
const int consecutiveReadings = 3;     // Jumlah pembacaan berturut-turut untuk konfirmasi
const int sensorTimeout = 1000;        // Timeout untuk menunggu sensor kedua (ms)
const int debounceDelay = 500;         // Delay minimum antara deteksi (ms)

// Status sensor
bool sensorAState = false;
bool sensorBState = false;
unsigned long lastDetectionTime = 0;

// Buffer untuk pembacaan berturut-turut
int bufferA[consecutiveReadings];
int bufferB[consecutiveReadings];
int bufferIndex = 0;

// HTML template dengan tambahan tombol reset
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Visitor Counter System</title>
  <style>
    body { 
      font-family: Arial; 
      text-align: center; 
      margin: 0;
      padding: 20px;
      background-color: #f0f0f0;
    }
    .card {
      background-color: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin: 10px auto;
      max-width: 400px;
    }
    .value {
      font-size: 30px;
      font-weight: bold;
      color: #0066cc;
    }
    .label {
      font-size: 16px;
      color: #666;
    }
    .sensor-data {
      font-size: 14px;
      color: #888;
      margin-top: 20px;
    }
    .reset-button {
      background-color: #ff4444;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      margin: 20px 0;
    }
    .reset-button:hover {
      background-color: #cc0000;
    }
  </style>
  <script>
    setInterval(function() {
      getData();
    }, 1000);

    function getData() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var data = JSON.parse(this.responseText);
          document.getElementById("countIn").innerHTML = data.in;
          document.getElementById("countOut").innerHTML = data.out;
          document.getElementById("current").innerHTML = data.current;
          document.getElementById("sensorA").innerHTML = data.distanceA;
          document.getElementById("sensorB").innerHTML = data.distanceB;
        }
      };
      xhttp.open("GET", "/data", true);
      xhttp.send();
    }

    function resetCounters() {
      if(confirm("Apakah anda yakin ingin mereset semua counter?")) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            getData(); // Refresh data setelah reset
          }
        };
        xhttp.open("POST", "/reset", true);
        xhttp.send();
      }
    }
  </script>
</head>
<body>
  <h2>Visitor Counter System</h2>
  
  <div class="card">
    <div class="label">Masuk</div>
    <div class="value" id="countIn">0</div>
  </div>
  
  <div class="card">
    <div class="label">Keluar</div>
    <div class="value" id="countOut">0</div>
  </div>
  
  <div class="card">
    <div class="label">Pengunjung Saat Ini</div>
    <div class="value" id="current">0</div>
  </div>

  <button class="reset-button" onclick="resetCounters()">Reset Counter</button>

  <div class="sensor-data">
    <p>Sensor A: <span id="sensorA">0</span> cm</p>
    <p>Sensor B: <span id="sensorB">0</span> cm</p>
  </div>
</body>
</html>
)rawliteral";

// Fungsi untuk membaca jarak dari sensor ultrasonik dengan filter noise
long readDistance(int trigPin, int echoPin) {
  long total = 0;
  for(int i = 0; i < 3; i++) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    long duration = pulseIn(echoPin, HIGH, 23529);
    if (duration == 0) return 400;
    
    total += duration * 0.034 / 2;
    delay(10);
  }
  return total / 3;
}

bool isObjectDetected(int buffer[], long newReading) {
  for(int i = 0; i < consecutiveReadings-1; i++) {
    buffer[i] = buffer[i+1];
  }
  buffer[consecutiveReadings-1] = (newReading < detectionThreshold) ? 1 : 0;
  
  int sum = 0;
  for(int i = 0; i < consecutiveReadings; i++) {
    sum += buffer[i];
  }
  return sum >= consecutiveReadings-1;
}

void handleRoot() {
  server.send(200, "text/html", index_html);
}

void handleData() {
  long distanceA = readDistance(trigPinA, echoPinA);
  long distanceB = readDistance(trigPinB, echoPinB);
  
  String json = "{";
  json += "\"in\":" + String(countIn) + ",";
  json += "\"out\":" + String(countOut) + ",";
  json += "\"current\":" + String(currentVisitor) + ",";
  json += "\"distanceA\":" + String(distanceA) + ",";
  json += "\"distanceB\":" + String(distanceB);
  json += "}";
  server.send(200, "application/json", json);
}

// Handler untuk reset counter
void handleReset() {
  countIn = 0;
  countOut = 0;
  currentVisitor = 0;
  
  // Simpan nilai reset ke persistent storage
  preferences.putInt("countIn", countIn);
  preferences.putInt("countOut", countOut);
  preferences.putInt("current", currentVisitor);
  
  server.send(200, "text/plain", "OK");
}

void handleNotFound() {
  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void setupServer() {
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  WiFi.softAP(ssid, password);

  dnsServer.start(DNS_PORT, "*", apIP);

  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.on("/reset", HTTP_POST, handleReset);  // Tambah handler reset
  server.onNotFound(handleNotFound);
  
  server.begin();
  Serial.println("HTTP server started");
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());
}

void setup() {
  // Inisialisasi persistent storage
  preferences.begin("visitor", false);
  
  // Load nilai tersimpan
  countIn = preferences.getInt("countIn", 0);
  countOut = preferences.getInt("countOut", 0);
  currentVisitor = preferences.getInt("current", 0);

  pinMode(trigPinA, OUTPUT);
  pinMode(echoPinA, INPUT);
  pinMode(trigPinB, OUTPUT);
  pinMode(echoPinB, INPUT);

  memset(bufferA, 0, sizeof(bufferA));
  memset(bufferB, 0, sizeof(bufferB));

  Serial.begin(115200);
  
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Visitor Counter");
  lcd.setCursor(0, 1);
  lcd.print("Starting AP...");

  setupServer();
  
  delay(2000);
  lcd.clear();
}

void loop() {
  dnsServer.processNextRequest();
  server.handleClient();

  long distanceA = readDistance(trigPinA, echoPinA);
  long distanceB = readDistance(trigPinB, echoPinB);

  lcd.setCursor(0, 0);
  lcd.print("A:");
  lcd.print(distanceA);
  lcd.print("cm ");
  lcd.print("B:");
  lcd.print(distanceB);
  lcd.print("cm    ");

  if (millis() - lastDetectionTime < debounceDelay) {
    return;
  }

  bool newSensorAState = isObjectDetected(bufferA, distanceA);
  bool newSensorBState = isObjectDetected(bufferB, distanceB);

  static enum {IDLE, A_ACTIVE, B_ACTIVE} state = IDLE;
  static unsigned long stateTimer = 0;

  switch(state) {
    case IDLE:
      if (newSensorAState && !newSensorBState) {
        state = A_ACTIVE;
        stateTimer = millis();
      }
      else if (newSensorBState && !newSensorAState) {
        state = B_ACTIVE;
        stateTimer = millis();
      }
      break;

    case A_ACTIVE:
      if (newSensorBState) {
        if (millis() - stateTimer < sensorTimeout) {
          countIn++;
          currentVisitor++;
          // Simpan perubahan ke persistent storage
          preferences.putInt("countIn", countIn);
          preferences.putInt("current", currentVisitor);
          Serial.println("IN: " + String(countIn));
          lastDetectionTime = millis();
        }
        state = IDLE;
      }
      else if (millis() - stateTimer > sensorTimeout) {
        state = IDLE;
      }
      break;

    case B_ACTIVE:
      if (newSensorAState) {
        if (millis() - stateTimer < sensorTimeout) {
          countOut++;
          currentVisitor = max(0, currentVisitor - 1);
          // Simpan perubahan ke persistent storage
          preferences.putInt("countOut", countOut);
          preferences.putInt("current", currentVisitor);
          Serial.println("OUT: " + String(countOut));
          lastDetectionTime = millis();
        }
        state = IDLE;
      }
      else if (millis() - stateTimer > sensorTimeout) {
        state = IDLE;
      }
      break;
  }

  lcd.setCursor(0, 1);
  lcd.print("I:");
  lcd.print(countIn);
  lcd.print(" O:");
  lcd.print(countOut);
  lcd.print(" C:");
  lcd.print(currentVisitor);
  lcd.print("   ");

  delay(50);
}